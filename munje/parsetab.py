
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'\xf9\x83-\x95\x03\x04\xcc\xffE<A\xa1\x81\xcfe\xaa'
    
_lr_action_items = {'RPAREN':([1,6,11,14,15,16,17,18,19,24,25,],[-8,-10,-9,24,25,-14,-16,-13,-15,-12,-11,]),'ENDSENTENCE':([1,5,6,11,20,21,22,23,24,25,27,],[-8,12,-10,-9,-19,-20,-21,26,-12,-11,-22,]),'RBRACKET':([2,4,9,10,12,26,29,30,],[-4,-1,-3,-2,-7,-6,30,-5,]),'NOT':([8,],[17,]),'EQUALS':([8,],[18,]),'OR':([8,],[19,]),'LPAREN':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,20,21,22,23,24,25,26,27,28,29,30,],[8,-8,-4,8,-1,8,-10,8,-3,-2,-9,-7,8,8,-19,-20,-21,8,-12,-11,-6,-22,8,8,-5,]),'NAME':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,20,21,22,23,24,25,26,27,28,29,30,],[6,-8,-4,6,-1,6,-10,13,6,-3,-2,-9,-7,6,6,-19,-20,-21,6,-12,-11,-6,-22,6,6,-5,]),'DEF':([0,2,3,4,9,10,12,26,28,29,30,],[7,-4,7,-1,-3,-2,-7,-6,7,7,-5,]),'$end':([2,3,4,9,10,12,26,30,],[-4,0,-1,-3,-2,-7,-6,-5,]),'AND':([8,],[16,]),'LBRACKET':([6,20,21,22,23,24,25,27,],[-10,-19,-20,-21,28,-12,-11,-22,]),'ALLNAME':([6,13,20,21,22,23,24,25,27,],[-10,21,-19,-20,-21,21,-12,-11,-22,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'selbri':([0,3,5,8,13,14,23,28,29,],[1,1,11,1,20,11,20,1,1,]),'declaration':([0,3,28,29,],[2,2,2,2,]),'selbri_list':([0,3,8,28,29,],[5,5,14,5,5,]),'program':([0,28,],[3,29,]),'operator':([8,],[15,]),'argument':([13,23,],[22,27,]),'definition':([0,3,28,29,],[9,9,9,9,]),'expression':([0,3,28,29,],[4,10,4,10,]),'argument_list':([13,],[23,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> expression','program',1,'p_program','parser.py',40),
  ('program -> program expression','program',2,'p_program','parser.py',41),
  ('expression -> definition','expression',1,'p_expression','parser.py',44),
  ('expression -> declaration','expression',1,'p_expression','parser.py',45),
  ('definition -> DEF NAME argument_list LBRACKET program RBRACKET','definition',6,'p_definition','parser.py',48),
  ('definition -> DEF NAME argument_list ENDSENTENCE','definition',4,'p_definition_blank','parser.py',51),
  ('declaration -> selbri_list ENDSENTENCE','declaration',2,'p_declaration','parser.py',54),
  ('selbri_list -> selbri','selbri_list',1,'p_selbri_list','parser.py',57),
  ('selbri_list -> selbri_list selbri','selbri_list',2,'p_selbri_list','parser.py',58),
  ('selbri -> NAME','selbri',1,'p_selbri','parser.py',61),
  ('selbri -> LPAREN operator RPAREN','selbri',3,'p_selbri_special','parser.py',64),
  ('selbri -> LPAREN selbri_list RPAREN','selbri',3,'p_selbri_declaration','parser.py',67),
  ('operator -> EQUALS','operator',1,'p_operator','parser.py',70),
  ('operator -> AND','operator',1,'p_operator','parser.py',71),
  ('operator -> OR','operator',1,'p_operator','parser.py',72),
  ('operator -> NOT','operator',1,'p_operator','parser.py',73),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',76),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('argument -> selbri','argument',1,'p_argument','parser.py',80),
  ('argument -> ALLNAME','argument',1,'p_argument','parser.py',81),
  ('argument_list -> argument','argument_list',1,'p_argument_list','parser.py',84),
  ('argument_list -> argument_list argument','argument_list',2,'p_argument_list','parser.py',85),
]
