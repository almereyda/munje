Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> expression
Rule 2     program -> program expression
Rule 3     expression -> definition
Rule 4     expression -> declaration
Rule 5     definition -> DEF NAME argument_list LBRACKET program RBRACKET
Rule 6     definition -> DEF NAME argument_list ENDSENTENCE
Rule 7     declaration -> selbri_list ENDSENTENCE
Rule 8     selbri_list -> selbri
Rule 9     selbri_list -> selbri_list selbri
Rule 10    selbri -> NAME
Rule 11    selbri -> LPAREN operator RPAREN
Rule 12    selbri -> LPAREN selbri_list RPAREN
Rule 13    operator -> EQUALS
Rule 14    operator -> AND
Rule 15    operator -> OR
Rule 16    operator -> NOT
Rule 17    declaration_list -> declaration
Rule 18    declaration_list -> declaration_list declaration
Rule 19    argument -> selbri
Rule 20    argument -> ALLNAME
Rule 21    argument_list -> argument
Rule 22    argument_list -> argument_list argument

Terminals, with rules where they appear

ALLNAME              : 20
AND                  : 14
DEF                  : 5 6
ENDSENTENCE          : 6 7
EQUALS               : 13
LBRACKET             : 5
LPAREN               : 11 12
NAME                 : 5 6 10
NOT                  : 16
OR                   : 15
RBRACKET             : 5
RPAREN               : 11 12
error                : 

Nonterminals, with rules where they appear

argument             : 21 22
argument_list        : 5 6 22
declaration          : 4 17 18
declaration_list     : 18
definition           : 3
expression           : 1 2
operator             : 11
program              : 2 5 0
selbri               : 8 9 19
selbri_list          : 7 9 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expression
    (2) program -> . program expression
    (3) expression -> . definition
    (4) expression -> . declaration
    (5) definition -> . DEF NAME argument_list LBRACKET program RBRACKET
    (6) definition -> . DEF NAME argument_list ENDSENTENCE
    (7) declaration -> . selbri_list ENDSENTENCE
    (8) selbri_list -> . selbri
    (9) selbri_list -> . selbri_list selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    DEF             shift and go to state 7
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 1
    declaration                    shift and go to state 2
    selbri_list                    shift and go to state 5
    program                        shift and go to state 3
    definition                     shift and go to state 9
    expression                     shift and go to state 4

state 1

    (8) selbri_list -> selbri .

    ENDSENTENCE     reduce using rule 8 (selbri_list -> selbri .)
    NAME            reduce using rule 8 (selbri_list -> selbri .)
    LPAREN          reduce using rule 8 (selbri_list -> selbri .)
    RPAREN          reduce using rule 8 (selbri_list -> selbri .)


state 2

    (4) expression -> declaration .

    DEF             reduce using rule 4 (expression -> declaration .)
    NAME            reduce using rule 4 (expression -> declaration .)
    LPAREN          reduce using rule 4 (expression -> declaration .)
    $end            reduce using rule 4 (expression -> declaration .)
    RBRACKET        reduce using rule 4 (expression -> declaration .)


state 3

    (0) S' -> program .
    (2) program -> program . expression
    (3) expression -> . definition
    (4) expression -> . declaration
    (5) definition -> . DEF NAME argument_list LBRACKET program RBRACKET
    (6) definition -> . DEF NAME argument_list ENDSENTENCE
    (7) declaration -> . selbri_list ENDSENTENCE
    (8) selbri_list -> . selbri
    (9) selbri_list -> . selbri_list selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    DEF             shift and go to state 7
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 1
    declaration                    shift and go to state 2
    selbri_list                    shift and go to state 5
    definition                     shift and go to state 9
    expression                     shift and go to state 10

state 4

    (1) program -> expression .

    RBRACKET        reduce using rule 1 (program -> expression .)
    DEF             reduce using rule 1 (program -> expression .)
    NAME            reduce using rule 1 (program -> expression .)
    LPAREN          reduce using rule 1 (program -> expression .)
    $end            reduce using rule 1 (program -> expression .)


state 5

    (7) declaration -> selbri_list . ENDSENTENCE
    (9) selbri_list -> selbri_list . selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    ENDSENTENCE     shift and go to state 12
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 11

state 6

    (10) selbri -> NAME .

    LBRACKET        reduce using rule 10 (selbri -> NAME .)
    ENDSENTENCE     reduce using rule 10 (selbri -> NAME .)
    ALLNAME         reduce using rule 10 (selbri -> NAME .)
    NAME            reduce using rule 10 (selbri -> NAME .)
    LPAREN          reduce using rule 10 (selbri -> NAME .)
    RPAREN          reduce using rule 10 (selbri -> NAME .)


state 7

    (5) definition -> DEF . NAME argument_list LBRACKET program RBRACKET
    (6) definition -> DEF . NAME argument_list ENDSENTENCE

    NAME            shift and go to state 13


state 8

    (11) selbri -> LPAREN . operator RPAREN
    (12) selbri -> LPAREN . selbri_list RPAREN
    (13) operator -> . EQUALS
    (14) operator -> . AND
    (15) operator -> . OR
    (16) operator -> . NOT
    (8) selbri_list -> . selbri
    (9) selbri_list -> . selbri_list selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    EQUALS          shift and go to state 18
    AND             shift and go to state 16
    OR              shift and go to state 19
    NOT             shift and go to state 17
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 1
    selbri_list                    shift and go to state 14
    operator                       shift and go to state 15

state 9

    (3) expression -> definition .

    DEF             reduce using rule 3 (expression -> definition .)
    NAME            reduce using rule 3 (expression -> definition .)
    LPAREN          reduce using rule 3 (expression -> definition .)
    $end            reduce using rule 3 (expression -> definition .)
    RBRACKET        reduce using rule 3 (expression -> definition .)


state 10

    (2) program -> program expression .

    RBRACKET        reduce using rule 2 (program -> program expression .)
    DEF             reduce using rule 2 (program -> program expression .)
    NAME            reduce using rule 2 (program -> program expression .)
    LPAREN          reduce using rule 2 (program -> program expression .)
    $end            reduce using rule 2 (program -> program expression .)


state 11

    (9) selbri_list -> selbri_list selbri .

    ENDSENTENCE     reduce using rule 9 (selbri_list -> selbri_list selbri .)
    NAME            reduce using rule 9 (selbri_list -> selbri_list selbri .)
    LPAREN          reduce using rule 9 (selbri_list -> selbri_list selbri .)
    RPAREN          reduce using rule 9 (selbri_list -> selbri_list selbri .)


state 12

    (7) declaration -> selbri_list ENDSENTENCE .

    DEF             reduce using rule 7 (declaration -> selbri_list ENDSENTENCE .)
    NAME            reduce using rule 7 (declaration -> selbri_list ENDSENTENCE .)
    LPAREN          reduce using rule 7 (declaration -> selbri_list ENDSENTENCE .)
    $end            reduce using rule 7 (declaration -> selbri_list ENDSENTENCE .)
    RBRACKET        reduce using rule 7 (declaration -> selbri_list ENDSENTENCE .)


state 13

    (5) definition -> DEF NAME . argument_list LBRACKET program RBRACKET
    (6) definition -> DEF NAME . argument_list ENDSENTENCE
    (21) argument_list -> . argument
    (22) argument_list -> . argument_list argument
    (19) argument -> . selbri
    (20) argument -> . ALLNAME
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    ALLNAME         shift and go to state 21
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 20
    argument_list                  shift and go to state 23
    argument                       shift and go to state 22

state 14

    (12) selbri -> LPAREN selbri_list . RPAREN
    (9) selbri_list -> selbri_list . selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    RPAREN          shift and go to state 24
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 11

state 15

    (11) selbri -> LPAREN operator . RPAREN

    RPAREN          shift and go to state 25


state 16

    (14) operator -> AND .

    RPAREN          reduce using rule 14 (operator -> AND .)


state 17

    (16) operator -> NOT .

    RPAREN          reduce using rule 16 (operator -> NOT .)


state 18

    (13) operator -> EQUALS .

    RPAREN          reduce using rule 13 (operator -> EQUALS .)


state 19

    (15) operator -> OR .

    RPAREN          reduce using rule 15 (operator -> OR .)


state 20

    (19) argument -> selbri .

    LBRACKET        reduce using rule 19 (argument -> selbri .)
    ENDSENTENCE     reduce using rule 19 (argument -> selbri .)
    ALLNAME         reduce using rule 19 (argument -> selbri .)
    NAME            reduce using rule 19 (argument -> selbri .)
    LPAREN          reduce using rule 19 (argument -> selbri .)


state 21

    (20) argument -> ALLNAME .

    LBRACKET        reduce using rule 20 (argument -> ALLNAME .)
    ENDSENTENCE     reduce using rule 20 (argument -> ALLNAME .)
    ALLNAME         reduce using rule 20 (argument -> ALLNAME .)
    NAME            reduce using rule 20 (argument -> ALLNAME .)
    LPAREN          reduce using rule 20 (argument -> ALLNAME .)


state 22

    (21) argument_list -> argument .

    LBRACKET        reduce using rule 21 (argument_list -> argument .)
    ENDSENTENCE     reduce using rule 21 (argument_list -> argument .)
    ALLNAME         reduce using rule 21 (argument_list -> argument .)
    NAME            reduce using rule 21 (argument_list -> argument .)
    LPAREN          reduce using rule 21 (argument_list -> argument .)


state 23

    (5) definition -> DEF NAME argument_list . LBRACKET program RBRACKET
    (6) definition -> DEF NAME argument_list . ENDSENTENCE
    (22) argument_list -> argument_list . argument
    (19) argument -> . selbri
    (20) argument -> . ALLNAME
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    LBRACKET        shift and go to state 28
    ENDSENTENCE     shift and go to state 26
    ALLNAME         shift and go to state 21
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 20
    argument                       shift and go to state 27

state 24

    (12) selbri -> LPAREN selbri_list RPAREN .

    LBRACKET        reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)
    ENDSENTENCE     reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)
    ALLNAME         reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)
    NAME            reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)
    LPAREN          reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)
    RPAREN          reduce using rule 12 (selbri -> LPAREN selbri_list RPAREN .)


state 25

    (11) selbri -> LPAREN operator RPAREN .

    LBRACKET        reduce using rule 11 (selbri -> LPAREN operator RPAREN .)
    ENDSENTENCE     reduce using rule 11 (selbri -> LPAREN operator RPAREN .)
    ALLNAME         reduce using rule 11 (selbri -> LPAREN operator RPAREN .)
    NAME            reduce using rule 11 (selbri -> LPAREN operator RPAREN .)
    LPAREN          reduce using rule 11 (selbri -> LPAREN operator RPAREN .)
    RPAREN          reduce using rule 11 (selbri -> LPAREN operator RPAREN .)


state 26

    (6) definition -> DEF NAME argument_list ENDSENTENCE .

    DEF             reduce using rule 6 (definition -> DEF NAME argument_list ENDSENTENCE .)
    NAME            reduce using rule 6 (definition -> DEF NAME argument_list ENDSENTENCE .)
    LPAREN          reduce using rule 6 (definition -> DEF NAME argument_list ENDSENTENCE .)
    $end            reduce using rule 6 (definition -> DEF NAME argument_list ENDSENTENCE .)
    RBRACKET        reduce using rule 6 (definition -> DEF NAME argument_list ENDSENTENCE .)


state 27

    (22) argument_list -> argument_list argument .

    LBRACKET        reduce using rule 22 (argument_list -> argument_list argument .)
    ENDSENTENCE     reduce using rule 22 (argument_list -> argument_list argument .)
    ALLNAME         reduce using rule 22 (argument_list -> argument_list argument .)
    NAME            reduce using rule 22 (argument_list -> argument_list argument .)
    LPAREN          reduce using rule 22 (argument_list -> argument_list argument .)


state 28

    (5) definition -> DEF NAME argument_list LBRACKET . program RBRACKET
    (1) program -> . expression
    (2) program -> . program expression
    (3) expression -> . definition
    (4) expression -> . declaration
    (5) definition -> . DEF NAME argument_list LBRACKET program RBRACKET
    (6) definition -> . DEF NAME argument_list ENDSENTENCE
    (7) declaration -> . selbri_list ENDSENTENCE
    (8) selbri_list -> . selbri
    (9) selbri_list -> . selbri_list selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    DEF             shift and go to state 7
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 1
    declaration                    shift and go to state 2
    selbri_list                    shift and go to state 5
    program                        shift and go to state 29
    expression                     shift and go to state 4
    definition                     shift and go to state 9

state 29

    (5) definition -> DEF NAME argument_list LBRACKET program . RBRACKET
    (2) program -> program . expression
    (3) expression -> . definition
    (4) expression -> . declaration
    (5) definition -> . DEF NAME argument_list LBRACKET program RBRACKET
    (6) definition -> . DEF NAME argument_list ENDSENTENCE
    (7) declaration -> . selbri_list ENDSENTENCE
    (8) selbri_list -> . selbri
    (9) selbri_list -> . selbri_list selbri
    (10) selbri -> . NAME
    (11) selbri -> . LPAREN operator RPAREN
    (12) selbri -> . LPAREN selbri_list RPAREN

    RBRACKET        shift and go to state 30
    DEF             shift and go to state 7
    NAME            shift and go to state 6
    LPAREN          shift and go to state 8

    selbri                         shift and go to state 1
    declaration                    shift and go to state 2
    selbri_list                    shift and go to state 5
    expression                     shift and go to state 10
    definition                     shift and go to state 9

state 30

    (5) definition -> DEF NAME argument_list LBRACKET program RBRACKET .

    DEF             reduce using rule 5 (definition -> DEF NAME argument_list LBRACKET program RBRACKET .)
    NAME            reduce using rule 5 (definition -> DEF NAME argument_list LBRACKET program RBRACKET .)
    LPAREN          reduce using rule 5 (definition -> DEF NAME argument_list LBRACKET program RBRACKET .)
    $end            reduce using rule 5 (definition -> DEF NAME argument_list LBRACKET program RBRACKET .)
    RBRACKET        reduce using rule 5 (definition -> DEF NAME argument_list LBRACKET program RBRACKET .)

